//--------------------------------------------------------------------------------------------------------------------------------------------------------------
// Project:	    N/A
// Application: Neural Network Class
// Class:	    NeuralNetwork
// Version:	    1.0
// Date:	    2015
// Author:	    Rohin Gosling
//
// Description:
//
//   Neural network class.
//
//   Note:
//   - Ported from my Java version of this class.
//
// Terminology:
//
// - Unit
//   + Refers to a single neural unit.
//   + Other names used in literature include; neuron, perceptron, perceptron unit, or in the
//     context of vectors, an element.
//
// - Input and Output Vectors
//   Vectors who's elements represent individual unit values (perceptron values).
//
// - Weight Vector
//   A vector who's elements represent the weights of all input dendrites to a single
//   unit (perceptron, neuron, etc).
//
// - Layer Operations
//   Calculations that carry and transform the input vector into a layer, through the various
//   stages that lead to the output vector.
//   + Weight Function.
//   + Network Function, or Net Function.
//   + Transfer Function.
//
// - Weight Function
//   + Function used to compute the relationship between the input vector and the weight vector.
//   + This is most commonly performed by calculating the Hadamard Product of the input and weight
//     vectors.
//
// - Network Function (Net Function)
//   + The network function integrates all the inputs and bias values, into a single scalar value 
//     to be used as the input into the transfer function.
//   + This is typically performed by summing up all the results of the weight function and the bias
//     unit (neuron).
//
// - Activation Function
//   The activation function defines the transfer threshold behaviour of a perceptron unit (neuron).
//
// Apendix A - DLL Managment
//
//   Create a DLL:
//
//     1. Set target configuration type to DLL.
//        Properties\Configuration Properties\General\Configuration Type = “Dynamic Library (.dll)
//     
//     2. Add a namespace to the DLL class.
//     
//     3. Add export symbol to compiler command line.
//        e.g. For the export symbol, “CLASS_NAME_EXPORTS”, then;
//        Properties\Configuration Properties\C/C++\Command Line\Additional Options = “/D CLASS_NAME_EXPORTS”
//     
//     4. Add a #define to the DLL header file, for the export symbol.
//        e.g. For the export symbol, “CLASS_NAME_EXPORTS”, then;
//     
//        #ifdef CLASS_NAME_EXPORTS
//            #define CLASS_NAME_API __declspec ( dllexport ) 
//        #else
//            #define CLASS_NAME_API __declspec ( dllimport ) 
//        #endif
//     
//     5. Apply the export symbol modifier to either the entire class, or selected members.
//
//     6. Specify explicate STL template classes to export before class decleration, where required.
//        e.g. template class __declspec ( dllexport ) std::vector<string>;
//             or
//        e.g. template class CLASS_NAME_API std::vector<string>;
//
//
//   Reference a DLL (Test):
//   
//     1. Create a test application.
//   
//     2. Add a reference to the DLL.
//        Properties\Common Properties\Add New Reference
//   
//     3. Add the DLL’s header file directory to the project.
//        Properties\Configuration Properties\VC++ Directories
//   
//     4. Optional: Add “using namespace” to the consumer class, for neater referencing.
//   
//
//   Reference a DLL (Implicate Linking):
//   
//     1. Create DLL comsumer application.
//
//     2. Copy both the DLL's .dll and .lib files, in the output folder.
//
//     3. Copy the DLL's header file to the source code folder.
//   
//     4. Add a reference to the LIB file.
//        Properties\Configuration Properties\Linker\Input\Aditional Dependencies = file_name.lib 
//   
//     4. Optional: Add “using namespace” to the consumer class, for neater referencing.
//
//
//   Reference a DLL (Explicate Linking):
//
//     1. TODO:
//
//     2. TODO:
//
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

#include "stdafx.h"
#include "neural_network.h"

#define ACTIVATION_FUNCTION_TYPE NeuralNetwork::ActivationFunction

namespace common
{
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Constructor/s
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// Constructor 1/2.
	
	NeuralNetwork::NeuralNetwork ()
	{	
	}

	// Constructor 2/2.

	NeuralNetwork::NeuralNetwork ( Architecture architecture )
	{
	}


	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Copy constructor/s.
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::NeuralNetwork ( const NeuralNetwork& neural_network )
	{
		this->network = neural_network.network;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Destructor
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::~NeuralNetwork ()
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Operator/s.
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	// Operator: Assignment.
	// Symbol:   =

	NeuralNetwork& NeuralNetwork::operator = ( const NeuralNetwork& neural_network )
	{
		this->network = neural_network.network;

		return *this;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Operator/s.
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::initialize_network ( Architecture architecture )
	{	
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// initialize_layer_weights
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_layer_weights ( Weight weight, Index layer_index )
	{	
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// initialize_network_weights
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_network_weights ( Weight weight )
	{	
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// randomize_layer_weights
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::randomize_layer_weights ( Weight min, Weight max, Index layer_index )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// randomize_network_weights
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::randomize_network_weights ( Weight min, Weight max )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// compute_layer
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
	NeuralNetwork::OutputVector NeuralNetwork::compute_layer ( InputVector x, Index layer_index )
	{
		// Initialize local variables.

		OutputVector y;

		// Return result to caller.

		return y;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// compute_network
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
	NeuralNetwork::OutputVector NeuralNetwork::compute_network ( InputVector x )
	{
		// Initialize local variables.

		OutputVector y;

		// Return result to caller.

		return y;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// back_propagate
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
		
	void NeuralNetwork::back_propagate ( InputVector input_vector, OutputVector output_vector, Error min_mse, Index epoch_count, Time time_out )
	{
		// while terminating event not raised, do

			// For all {x,y) in training_data, do

				// 1. Feed forward.
				//    y' = compute_network ( x );
				//    y  = training_data   ( x );

				// 2. Compute errors.
				//    e = y' - y

				// 3. Compute weight deltas
				//    - Compute ∆wₒ for outut layer.
				//    - Compute ∆wᵢ for all other layers
		
				// 4. Update network weights.
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// compute_network_function
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::Data NeuralNetwork::compute_network_function ( Data x )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// compute_activation_function
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::Data NeuralNetwork::compute_activation_function ( Data x )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	string NeuralNetwork::to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::layer_to_string ( Index layer_index )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::unit_to_string ( Index layer_index, Index unit_index )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::input_vector_to_string ( InputVector input_vector )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::output_vector_to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::output_vector_to_string ( Index layer_index )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::output_vector_map_to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::error_vector_to_string ( Index layer_index )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::error_vector_map_to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::network_info_to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::backpropagation_results_to_string ()
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    int NeuralNetwork::save_network_to_csv ( string file_name )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::save_network_to_bin ( string file_name )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::save_network_to_bin_fixed ( string file_name, unsigned char bit_width, bool signed_data )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::save_network_to_text ( string file_name )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::load_network_from_csv ( string file_name )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::load_network_from_bin ( string file_name )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::load_network_from_bin_fixed ( string file_name, unsigned char bit_width, bool signed_data )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::log_to_string ( string label, string message, bool time_visible )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	string NeuralNetwork::log_to_console ( string label, string message, bool time_visible )
	{
		return "";
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	int NeuralNetwork::log_to_file ( string file_name, string label, string message, bool time_visible )
	{
		return 0;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_hidden_layer_activation_function ( ActivationFunction activation_function )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_output_layer_activation_function ( ActivationFunction activation_function )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::Unit  NeuralNetwork::get_unit ( Index layer_index, Index unit_index )
	{
		Unit unit;

		return unit;
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	NeuralNetwork::Layer NeuralNetwork::get_layer ( Index layer_index )
	{
		Layer layer;

		return layer;
	}
	
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_unit ( Index layer_index, Index unit_index, Unit unit )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	void NeuralNetwork::set_layer ( Index layer_index, Layer layer )
	{
	}

	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	// Function:
	//
	// - function_name
	//
	// Description:
	//
	// - Function description.
	//
	// Arguments:   
	//
	// - x
	//   Description of argument x.
	//
	// Return Value:
	//
	// - Description of return value.
	//
	// Pre-Conditions:
	//
	// - N/A
	//   
	// Post-Conditions:
	//
	// - N/A
	//
	//--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
}