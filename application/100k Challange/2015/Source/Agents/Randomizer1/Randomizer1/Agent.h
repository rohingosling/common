//--------------------------------------------------------------------------------------------------------------------------------------
// Project:				100k Challange
// Application Name:	Randomizer1
// Class:               ConsoleApplication
// Version:				1.0
// Author:				Rohin Gosling
//
// Description:
//
//   General purpose console application platform.
//
//--------------------------------------------------------------------------------------------------------------------------------------

#pragma once

#include <string>

using namespace std;

class Agent
{
	//----------------------------------------------------------------------------------------------------------------------------------
	// Constants
	//----------------------------------------------------------------------------------------------------------------------------------

public:

	// Agent commands.

	const string CMD_HOLD_POSITION               = "Nothing";
	const string CMD_ADVANCE_LEFT                = "MoveLeft";
	const string CMD_ADVANCE_RIGHT               = "MoveRight";
	const string CMD_ENGAGE                      = "Shoot";
	const string CMD_CONSTRUCT_DRONE_FACTORY     = "BuildAlienFactory";
	const string CMD_CONSTRUCT_MISSILE_CONTROLER = "BuildMissileController";
	const string CMD_CONSTRUCT_SHIELD            = "BuildShield";


	//----------------------------------------------------------------------------------------------------------------------------------
	// Data type aliases
	//----------------------------------------------------------------------------------------------------------------------------------

public:

	using AgentCommand = enum
	{
		HOLD_POSITION               = 0,	// Do nothing.
		ADVANCE_LEFT                = 1,	// Move left.
		ADVANCE_RIGHT               = 2,	// Move right.
		ENGAGE                      = 3,	// Fire weapon.
		CONSTRUCT_DRONE_FACTORY     = 4,	// Build a drone factory.
		CONSTRUCT_MISSILE_CONTROLER = 5,	// Build a missile controller.
		CONSTRUCT_SHIELD            = 6		// Build a shield in front of the agent.
	};

	//----------------------------------------------------------------------------------------------------------------------------------
	// Public methods.
	//----------------------------------------------------------------------------------------------------------------------------------

public:

	// Constructors and destructors.

	Agent ();
	~Agent ();

	//----------------------------------------------------------------------------------------------------------------------------------
	// Accessors and mutators
	//----------------------------------------------------------------------------------------------------------------------------------

	// ...


	//----------------------------------------------------------------------------------------------------------------------------------
	// Public member data.
	//----------------------------------------------------------------------------------------------------------------------------------

public:

	// ...


	//----------------------------------------------------------------------------------------------------------------------------------
	// Private methods.
	//----------------------------------------------------------------------------------------------------------------------------------

private:

	// ...


	//----------------------------------------------------------------------------------------------------------------------------------
	// Private member data.
	//----------------------------------------------------------------------------------------------------------------------------------

private:

	// ...
};

